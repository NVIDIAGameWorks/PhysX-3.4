// This code contains NVIDIA Confidential Information and is disclosed to you
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and
// any modifications thereto. Any use, reproduction, disclosure, or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA Corporation is strictly prohibited.
//
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2018 NVIDIA Corporation. All rights reserved.

/*
- get rid of STL

- NpArticulationLinkArray with more than 4 entries
- big convexes Xbox => PC

- put a cache in "convertClass" function
- remove MD one at a time and check what happens in the converter. Make it robust/report errors
- for xbox, compare against source xbox file if it exists
- maybe put some info in the header to display "File generated by ConvX 1.xx" on screen (to debug)
- report inconsistent naming convention in each class!!!!
- try to automatically discover padding bytes? use "0xcd" pattern?
* do last param of XXXX_ITEMS macro automatically
- what if source files are 64bits? can we safely convert a 64bit ptr to 32bit?
*/

#include "foundation/PxErrorCallback.h"
#include "foundation/PxAllocatorCallback.h"
#include "foundation/PxIO.h"
#include "SnConvX.h"
#include "serialization/SnSerializationRegistry.h"
#include <assert.h>
#include "PsFoundation.h"

using namespace physx;

Sn::ConvX::ConvX() :
    mMetaData_Src		(NULL),
	mMetaData_Dst		(NULL),
	mOutStream			(NULL),
	mMustFlip			(false),
	mOutputSize			(0),
	mSrcPtrSize			(0),
	mDstPtrSize			(0),
	mNullPtr			(false),
	mNoOutput			(false),
	mMarkedPadding		(false),
	mNbErrors			(0),
	mNbWarnings			(0),
	mReportMode			(PxConverterReportMode::eNORMAL),
	mPerformConversion	(true)	
{
	//	memset(mZeros, 0, CONVX_ZERO_BUFFER_SIZE);
	memset(mZeros, 0x42, CONVX_ZERO_BUFFER_SIZE);
}

Sn::ConvX::~ConvX()
{
	resetNbErrors();
	resetConvexFlags();
	releaseMetaData();
	resetUnions();
}

void Sn::ConvX::release()
{
	delete this;
}

bool Sn::ConvX::setMetaData(PxInputStream& inputStream, MetaDataType type)
{
	resetNbErrors();
	return (loadMetaData(inputStream, type) != NULL);		
}

bool Sn::ConvX::setMetaData(PxInputStream& srcMetaData, PxInputStream& dstMetaData)
{
	releaseMetaData();
	resetUnions();

	if(!setMetaData(srcMetaData, META_DATA_SRC))
		return false;
	if(!setMetaData(dstMetaData, META_DATA_DST))
		return false;

	return true;
}

bool Sn::ConvX::compareMetaData() const
{
	if (!mMetaData_Src || !mMetaData_Dst) {
		Ps::getFoundation().error(PxErrorCode::eINVALID_OPERATION, __FILE__, __LINE__,
			"PxBinaryConverter: metadata not defined. Call PxBinaryConverter::setMetaData first.\n");
		return false;
	}

	return mMetaData_Src->compare(*mMetaData_Dst);
}

bool Sn::ConvX::convert(PxInputStream& srcStream, PxU32 srcSize, PxOutputStream& targetStream)
{
	if(!mMetaData_Src || !mMetaData_Dst)
	{
		Ps::getFoundation().error(PxErrorCode::eINVALID_OPERATION, __FILE__, __LINE__,
			"PxBinaryConverter: metadata not defined. Call PxBinaryConverter::setMetaData first.\n");
		return false;
	}

	resetConvexFlags();
	resetNbErrors();

	bool conversionStatus = false;
	if(mPerformConversion)
	{	
		if(srcSize == 0)
		{
			Ps::getFoundation().error(PxErrorCode::eINVALID_PARAMETER, __FILE__, __LINE__, 
				"PxBinaryConverter: source serialized data size is zero.\n");
			return false;
		}

		void* memory = PX_ALLOC_TEMP(srcSize+ALIGN_FILE, "ConvX source file");
		void* memoryA = reinterpret_cast<void*>((size_t(memory) + ALIGN_FILE)&~(ALIGN_FILE-1));

		const PxU32 nbBytesRead = srcStream.read(memoryA, srcSize);
		if(nbBytesRead != srcSize)
		{
			Ps::getFoundation().error(PxErrorCode::eINVALID_PARAMETER, __FILE__, __LINE__, 
				"PxBinaryConverter: failure on reading source serialized data.\n");
			PX_FREE(memory);
			return false;
		}

		displayMessage(PxErrorCode::eDEBUG_INFO, "\n\nConverting...\n\n");

		{
			if(!initOutput(targetStream))
			{
				PX_FREE(memory);
				return false;
			}
			conversionStatus = convert(memoryA, int(srcSize));
			closeOutput();
		}

		PX_FREE(memory);
	}
	return conversionStatus;
}
